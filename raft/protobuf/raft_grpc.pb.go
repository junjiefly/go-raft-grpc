// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: raft.proto

package raft

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaftServerClient is the client API for RaftServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftServerClient interface {
	ClusterStatusHandler(ctx context.Context, in *ClusterStatusRequest, opts ...grpc.CallOption) (*ClusterStatusResponse, error)
	ClusterJoinHandler(ctx context.Context, in *ClusterJoinRequest, opts ...grpc.CallOption) (*ClusterJoinResponse, error)
	ClusterLeaveHandler(ctx context.Context, in *ClusterLeaveRequest, opts ...grpc.CallOption) (*ClusterLeaveResponse, error)
	AppendEntriesRequestHandler(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	VoteRequestHandler(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	NewVoteHandler(ctx context.Context, in *NewVoteRequest, opts ...grpc.CallOption) (*NewVoteResponse, error)
	SnapshotRequestHandler(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error)
	SnapshotRecoveryRequestHandler(ctx context.Context, in *SnapshotRecoveryRequest, opts ...grpc.CallOption) (*SnapshotRecoveryResponse, error)
}

type raftServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftServerClient(cc grpc.ClientConnInterface) RaftServerClient {
	return &raftServerClient{cc}
}

func (c *raftServerClient) ClusterStatusHandler(ctx context.Context, in *ClusterStatusRequest, opts ...grpc.CallOption) (*ClusterStatusResponse, error) {
	out := new(ClusterStatusResponse)
	err := c.cc.Invoke(ctx, "/raft.RaftServer/ClusterStatusHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServerClient) ClusterJoinHandler(ctx context.Context, in *ClusterJoinRequest, opts ...grpc.CallOption) (*ClusterJoinResponse, error) {
	out := new(ClusterJoinResponse)
	err := c.cc.Invoke(ctx, "/raft.RaftServer/ClusterJoinHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServerClient) ClusterLeaveHandler(ctx context.Context, in *ClusterLeaveRequest, opts ...grpc.CallOption) (*ClusterLeaveResponse, error) {
	out := new(ClusterLeaveResponse)
	err := c.cc.Invoke(ctx, "/raft.RaftServer/ClusterLeaveHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServerClient) AppendEntriesRequestHandler(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := c.cc.Invoke(ctx, "/raft.RaftServer/AppendEntriesRequestHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServerClient) VoteRequestHandler(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := c.cc.Invoke(ctx, "/raft.RaftServer/VoteRequestHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServerClient) NewVoteHandler(ctx context.Context, in *NewVoteRequest, opts ...grpc.CallOption) (*NewVoteResponse, error) {
	out := new(NewVoteResponse)
	err := c.cc.Invoke(ctx, "/raft.RaftServer/NewVoteHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServerClient) SnapshotRequestHandler(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error) {
	out := new(SnapshotResponse)
	err := c.cc.Invoke(ctx, "/raft.RaftServer/SnapshotRequestHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServerClient) SnapshotRecoveryRequestHandler(ctx context.Context, in *SnapshotRecoveryRequest, opts ...grpc.CallOption) (*SnapshotRecoveryResponse, error) {
	out := new(SnapshotRecoveryResponse)
	err := c.cc.Invoke(ctx, "/raft.RaftServer/SnapshotRecoveryRequestHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServerServer is the server API for RaftServer service.
// All implementations must embed UnimplementedRaftServerServer
// for forward compatibility
type RaftServerServer interface {
	ClusterStatusHandler(context.Context, *ClusterStatusRequest) (*ClusterStatusResponse, error)
	ClusterJoinHandler(context.Context, *ClusterJoinRequest) (*ClusterJoinResponse, error)
	ClusterLeaveHandler(context.Context, *ClusterLeaveRequest) (*ClusterLeaveResponse, error)
	AppendEntriesRequestHandler(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	VoteRequestHandler(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
	NewVoteHandler(context.Context, *NewVoteRequest) (*NewVoteResponse, error)
	SnapshotRequestHandler(context.Context, *SnapshotRequest) (*SnapshotResponse, error)
	SnapshotRecoveryRequestHandler(context.Context, *SnapshotRecoveryRequest) (*SnapshotRecoveryResponse, error)
	mustEmbedUnimplementedRaftServerServer()
}

// UnimplementedRaftServerServer must be embedded to have forward compatible implementations.
type UnimplementedRaftServerServer struct {
}

func (UnimplementedRaftServerServer) ClusterStatusHandler(context.Context, *ClusterStatusRequest) (*ClusterStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterStatusHandler not implemented")
}
func (UnimplementedRaftServerServer) ClusterJoinHandler(context.Context, *ClusterJoinRequest) (*ClusterJoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterJoinHandler not implemented")
}
func (UnimplementedRaftServerServer) ClusterLeaveHandler(context.Context, *ClusterLeaveRequest) (*ClusterLeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterLeaveHandler not implemented")
}
func (UnimplementedRaftServerServer) AppendEntriesRequestHandler(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntriesRequestHandler not implemented")
}
func (UnimplementedRaftServerServer) VoteRequestHandler(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRequestHandler not implemented")
}
func (UnimplementedRaftServerServer) NewVoteHandler(context.Context, *NewVoteRequest) (*NewVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewVoteHandler not implemented")
}
func (UnimplementedRaftServerServer) SnapshotRequestHandler(context.Context, *SnapshotRequest) (*SnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotRequestHandler not implemented")
}
func (UnimplementedRaftServerServer) SnapshotRecoveryRequestHandler(context.Context, *SnapshotRecoveryRequest) (*SnapshotRecoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotRecoveryRequestHandler not implemented")
}
func (UnimplementedRaftServerServer) mustEmbedUnimplementedRaftServerServer() {}

// UnsafeRaftServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftServerServer will
// result in compilation errors.
type UnsafeRaftServerServer interface {
	mustEmbedUnimplementedRaftServerServer()
}

func RegisterRaftServerServer(s grpc.ServiceRegistrar, srv RaftServerServer) {
	s.RegisterService(&RaftServer_ServiceDesc, srv)
}

func _RaftServer_ClusterStatusHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServerServer).ClusterStatusHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftServer/ClusterStatusHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServerServer).ClusterStatusHandler(ctx, req.(*ClusterStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftServer_ClusterJoinHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServerServer).ClusterJoinHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftServer/ClusterJoinHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServerServer).ClusterJoinHandler(ctx, req.(*ClusterJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftServer_ClusterLeaveHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServerServer).ClusterLeaveHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftServer/ClusterLeaveHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServerServer).ClusterLeaveHandler(ctx, req.(*ClusterLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftServer_AppendEntriesRequestHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServerServer).AppendEntriesRequestHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftServer/AppendEntriesRequestHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServerServer).AppendEntriesRequestHandler(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftServer_VoteRequestHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServerServer).VoteRequestHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftServer/VoteRequestHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServerServer).VoteRequestHandler(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftServer_NewVoteHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServerServer).NewVoteHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftServer/NewVoteHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServerServer).NewVoteHandler(ctx, req.(*NewVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftServer_SnapshotRequestHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServerServer).SnapshotRequestHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftServer/SnapshotRequestHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServerServer).SnapshotRequestHandler(ctx, req.(*SnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftServer_SnapshotRecoveryRequestHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRecoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServerServer).SnapshotRecoveryRequestHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftServer/SnapshotRecoveryRequestHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServerServer).SnapshotRecoveryRequestHandler(ctx, req.(*SnapshotRecoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftServer_ServiceDesc is the grpc.ServiceDesc for RaftServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raft.RaftServer",
	HandlerType: (*RaftServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClusterStatusHandler",
			Handler:    _RaftServer_ClusterStatusHandler_Handler,
		},
		{
			MethodName: "ClusterJoinHandler",
			Handler:    _RaftServer_ClusterJoinHandler_Handler,
		},
		{
			MethodName: "ClusterLeaveHandler",
			Handler:    _RaftServer_ClusterLeaveHandler_Handler,
		},
		{
			MethodName: "AppendEntriesRequestHandler",
			Handler:    _RaftServer_AppendEntriesRequestHandler_Handler,
		},
		{
			MethodName: "VoteRequestHandler",
			Handler:    _RaftServer_VoteRequestHandler_Handler,
		},
		{
			MethodName: "NewVoteHandler",
			Handler:    _RaftServer_NewVoteHandler_Handler,
		},
		{
			MethodName: "SnapshotRequestHandler",
			Handler:    _RaftServer_SnapshotRequestHandler_Handler,
		},
		{
			MethodName: "SnapshotRecoveryRequestHandler",
			Handler:    _RaftServer_SnapshotRecoveryRequestHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}
